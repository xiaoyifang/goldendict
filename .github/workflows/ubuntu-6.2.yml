name: Ubuntu-6.2
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on: 
  # workflow_run:
  #   workflows: [AutoTag]
  #   types: [completed]
  workflow_dispatch:
  push:
    branches:
      - dev
      - master
      # - staged
    paths-ignore:
      - 'docs/**'
      # - ".github/**"
      - "howto/**"
      - "*.md"
      - ".clang-format"

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        qt_ver: [ 6.5.2 ]
        qt_arch: [gcc_64]
    env:
      version: 23.07.25
      version-suffix: alpha
      prerelease: true
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          
          #serialport linuxdeploy need serialport to work.
          modules: qtwebengine qtwebchannel qtpositioning qt5compat qtmultimedia qtimageformats qtspeech qtserialport
          
      - name: ubuntu install thirdparty dependencies
        run: |
          sudo apt-get install git pkg-config build-essential 
          sudo apt-get install libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev 
          sudo apt-get install libxtst-dev liblzo2-dev libbz2-dev 
          sudo apt-get install libavutil-dev libavformat-dev libeb16-dev
          sudo apt-get install doxygen libzstd-dev libxkbcommon-dev libgstreamer-plugins-base1.0-0 libgstreamer-gl1.0-0
          sudo apt-get install  libxkbcommon-x11-dev libspeechd-dev
          sudo apt install libfuse2
          sudo ln -sf /usr/bin/x86_64-linux-gnu-ld.gold /usr/bin/ld
          
          #build opencc
          git clone https://github.com/BYVoid/OpenCC
          cd OpenCC/
          make PREFIX=/usr -j$(nproc)
          sudo make install
          cd ..

          # wget https://oligarchy.co.uk/xapian/1.4.22/xapian-core-1.4.22.tar.xz
          # tar xvf xapian-core-1.4.22.tar.xz
          # cd xapian-core-1.4.22
          # ./configure
          # make PREFIX=/usr
          # sudo make install
          # cd ..
          sudo apt install libxapian-dev
          sudo add-apt-repository --yes --update ppa:kiwixteam/release
          sudo apt install libzim-dev

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: version-file
        shell: bash
        env:
          VAR_SUFFIX: ${{env.version-suffix}}
          VAR_VERSION: ${{env.version}}
        run: |   
          current_tag=$(git rev-parse --short=8 HEAD)
          release_date=$(date +'%Y%m%d')
          echo "$VAR_VERSION-$VAR_SUFFIX.$release_date.$current_tag">version.txt  
          cat version.txt
          echo "$version"   
          
      - name: build goldendict
        run: |
          qmake CONFIG+=release CONFIG+=use_xapian PREFIX=/usr CONFIG+=zim_support CONFIG+=chinese_conversion_support CONFIG+=use_iconv
          make INSTALL_ROOT=appdir -j`nproc` install; find appdir/
          
          ls -al appdir
      - name: Build AppImage
        run: |
          # for /usr/lib/qt6/plugins/platforminputcontexts/libfcitx5platforminputcontextplugin.so
          sudo apt-get install extra-cmake-modules libxkbcommon-dev libxcb1 libxcb-cursor0
          git clone --single-branch --depth 1 https://github.com/fcitx/fcitx5-qt.git
          cd fcitx5-qt
          cmake -S . -B build  -DCMAKE_BUILD_TYPE=Release -DENABLE_QT4=OFF -DENABLE_QT5=OFF -DENABLE_QT6=ON -DBUILD_ONLY_PLUGIN=ON
          cmake --build build
          sudo cmake --install ./build
          cd ..
          
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
          chmod a+x linuxdeploy-plugin-qt-x86_64.AppImage
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          chmod a+x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --appdir appdir --output appimage --plugin qt  -i redist/icons/goldendict.png -d redist/io.github.xiaoyifang.goldendict_ng.desktop

      - name: changelog
        id: changelog
        run: |   
          previousTag=$(git tag --sort=-creatordate | grep "^v" | sed -n 2p)
          echo "previousTag : $previousTag"
          
          echo "::set-output name=prev_tag::$previousTag"
          echo "::set-output name=curr_tag::$(git tag --sort=-creatordate | grep "^v" | sed -n 1p)"

      - name: Set outputs
        id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 HEAD)"    
          echo "::set-output name=release_date::$(date +'%Y%m%d')"    
          echo "::set-output name=release_time::$(date +'%H%M%S')"  
          echo "::set-output name=release_time_clock::$(date +'%H:%M:%S')"   
          echo "::set-output name=release_hm::$(date +'%y%m%d')"  
          echo "::set-output name=appname::$(ls *.AppImage*)"

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          commitMode: false
          fromTag: ${{ steps.changelog.outputs.prev_tag }}
          toTag:  "${{ steps.changelog.outputs.curr_tag }}"  
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>üî¥ Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                {
                    "title": "## üöÄ Features",
                    "labels": ["feature","feat","opt"]
                },
                {
                    "title": "## üêõ Fixes",
                    "labels": ["fix","bug"]
                }
                ,
                {
                    "title": "##  ü§ñ  Github action",
                    "labels": ["action"]
                }
                ,
                {
                    "title": "##  üßº  Clean Code",
                    "labels": ["clean"]
                }

              ],
              "label_extractor": [
              {
                "pattern": "([^:]*):.*",
                "target": "$1",
                "on_property": "title",
                "flags": "gu"
              }
            ]
            }
      - name: uploadRelease
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.vars.outputs.appname }}
          asset_name: ${{ matrix.qt_ver }}-${{ steps.vars.outputs.appname }}
          
          tag: tag-${{env.version-suffix}}.${{ steps.vars.outputs.sha_short }}
          overwrite: true
          release_name: GoldenDict-ng-v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          prerelease: ${{env.prerelease}}
          body: |
            #### Install instructions for Windows, macOS and Linux 

            <https://xiaoyifang.github.io/goldendict-ng/install/>.

            #### Filename pattern (Êñá‰ª∂ÂêçÊ®°Âºè): **[Qt version]-GoldenDict-ng-[OS]-[release-date].[ext]**  

            Qt6.X is recommended for various enhancements.

            Windows users can use either `****-installer.exe` (for installer) or `****.zip` (unzip and run).
            The `goldendict.exe` can be dropped into previous installation's folder (if dependencies aren't changed).

            Linux users can use AppImages.

            macOS users can use `.dmg` installer.

            `6.5.1-GoldenDict.exe_windows-2019_20230701.zip` means built with Qt6.5.1, windows/msvc-2019 at 20230701 as a zip archive.

            #### Build Details

            AppImage: Ubuntu-20.04
            macOS: macOS-12 and macOS-13
            Windows: Visual studio 2019

            #### Changes
            
            ${{steps.build_changelog.outputs.changelog}}
