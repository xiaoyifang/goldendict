name: Ubuntu-6.2
# Qt官方没有linux平台的x86包
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on: 
  # workflow_run:
  #   workflows: [AutoTag]
  #   types: [completed]
  workflow_dispatch:
  push:
    branches:
      - dev
      - master
      # - staged
    paths-ignore:
      - 'docs/**'
      - ".github/**"
      - "howto/**"
      - "*.md"
      - ".clang-format"
  pull_request:
    branches:
      - dev
      - master
      # - staged
    paths-ignore:
      - 'docs/**'
      - ".github/**"
      - "howto/**"
      - "*.md"
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        qt_ver: [6.2.3]
        qt_arch: [gcc_64]
    env:
      version: 22.4.alpha
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cached: 'false'
          modules: qtwebengine qtwebchannel qtpositioning qt5compat qtmultimedia
      - name: ubuntu install thirdparty dependencies
        run: |
          sudo apt-get install git pkg-config build-essential 
          sudo apt-get install libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev 
          sudo apt-get install libxtst-dev liblzo2-dev libbz2-dev 
          sudo apt-get install libao-dev libavutil-dev libavformat-dev libtiff5-dev libeb16-dev 
          sudo apt-get install doxygen libzstd-dev libxkbcommon-dev libgstreamer-plugins-base1.0-0 libgstreamer-gl1.0-0
          sudo ln -sf /usr/bin/x86_64-linux-gnu-ld.gold /usr/bin/ld
          
          #build opencc
          git clone https://github.com/BYVoid/OpenCC
          cd OpenCC/
          make PREFIX=/usr -j$(nproc)
          sudo make install
          cd ..
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: build goldendict
        run: |
          qmake CONFIG+=release PREFIX=/usr   CONFIG+=zim_support   CONFIG+=chinese_conversion_support
          make INSTALL_ROOT=appdir -j`nproc` install; find appdir/
          
          #copy missing shared dll to appdir.
          mkdir -p appdir/usr/lib
          cp  $(ldd appdir/usr/bin/goldendict | grep -o '\W/[^ ]*' |grep gobject ) appdir/usr/lib
          cp  $(ldd appdir/usr/bin/goldendict | grep -o '\W/[^ ]*' |grep libpango ) appdir/usr/lib
      - name: Build AppImage
        run: |
          # wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
          # chmod a+x linuxdeploy-plugin-qt-x86_64.AppImage
          # wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          # chmod a+x linuxdeploy-x86_64.AppImage
          # ./linuxdeploy-x86_64.AppImage --appdir appdir --output appimage --plugin qt  -i redist/icons/goldendict.png -d redist/org.goldendict.GoldenDict.desktop 
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: AppImage
      #     path: './*.AppImage*'
      - name: Set outputs
        id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 HEAD)"    
          echo "::set-output name=release_date::$(date +'%Y%m%d')"    
          echo "::set-output name=release_time::$(date +'%H%M%S')"  
          echo "::set-output name=release_time_clock::$(date +'%H:%M:%S')"    
          echo "::set-output name=appname::$(ls *.AppImage*)"

          previousTag=$(git tag --sort=-creatordate | sed -n 2p)
          echo "previousTag : $previousTag"
          
          CHANGELOG="$(git log --oneline --no-decorate $previousTag..HEAD)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=COMMIT_SUMMARY::$(echo "$CHANGELOG")"          
      - name: uploadRelease
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.vars.outputs.appname }}
          asset_name: ${{ matrix.qt_ver }}-${{ steps.vars.outputs.appname }}
          tag: v${{env.version}}-${{ steps.vars.outputs.sha_short }}
          overwrite: true 
          release_name: win-linux-macos-${{steps.vars.outputs.release_date}} 
          prerelease: true
          body: |
            release on date:      ${{steps.vars.outputs.release_date}} time: ${{steps.vars.outputs.release_time_clock}}  
            branch:               ${{ github.ref_name }}
            commit:               ${{ steps.vars.outputs.sha_short }} 
            Qt version:           ${{ matrix.qt_ver }} ${{ matrix.qt_arch }}
            Windows built with:   msvc64  Visual studio 2019
            # goldendict.exe can not used alone 
            if you have a previous version. replace this maybe ok. if not ,download the whole bundle.
            
            AppImage built with:  Ubuntu-20.04 ,latest gcc
            macos built with:     macos-10.15,macos-11.0,clang_64 x86_64(Intel Kind)
            auto built by github action. use on your on risk:-)  

            CHANGES:
            ${{ steps.vars.outputs.COMMIT_SUMMARY }}             
