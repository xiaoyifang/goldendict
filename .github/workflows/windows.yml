name: Windows
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on: 
  # workflow_run:
  #   workflows: [AutoTag]
  #   types: [completed]
  workflow_dispatch:
  push:
    branches:
      - dev
      - master
      # - staged
    paths-ignore:
      - 'docs/**'
      - ".github/**"
      - "howto/**"
      - "*.md"
      - ".clang-format"      

jobs:
  build:
    name: Build
    # 运行平台
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        qt_ver: [5.15.2]
        qt_arch: [win64_msvc2019_64]
    env:
      targetName: GoldenDict.exe
      version: 23.06.02
      version-suffix: alpha
      prerelease: true
    # 步骤
    steps:
      # 安装Qt
      - name: Install Qt
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v3
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          # target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: 'false'
          modules: qtwebengine
      # 拉取代码
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: changelog
        id: changelog
        shell: bash
        run: |   
          previousTag=$(git tag --sort=-creatordate | sed -n 2p)
          echo "previousTag : $previousTag"
          
          CHANGELOG="$(git log --oneline --no-decorate $previousTag..HEAD)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          CHANGELOG="${CHANGELOG//'\"'/'%22'}"
          CHANGELOG="${CHANGELOG//"'"/ }"
          echo "::set-output name=changelog::$(echo "$CHANGELOG")"

      - name: Set outputs
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 HEAD)"    
          echo "::set-output name=release_date::$(date +'%Y%m%d')"    
          echo "::set-output name=release_time::$(date +'%H%M%S')"  
          echo "::set-output name=release_time_clock::$(date +'%H:%M:%S')"   
          echo "::set-output name=release_hm::$(date +'%y%m%d')"  

      - name: version-file
        shell: bash
        run: |   
          previousTag=$(git tag --sort=-creatordate | sed -n 1p |cut -c 2-)
          echo "$previousTag">version.txt

      - uses: ilammy/msvc-dev-cmd@v1
      # msvc编译
      - name: msvc-build goldendict
        id: build
        shell: cmd
        run: |
          # call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          qmake "CONFIG+=zim_support" CONFIG+=release CONFIG+=use_iconv CONFIG+=use_xapian
          nmake

          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
          echo QTDIR=%Qt5_DIR% >> %GITHUB_ENV%

      # 打包 
      - name: package
        id: package
        env:
          archiveName: GoldenDict-Windows.${{ steps.vars.outputs.sha_short }}-${{ steps.vars.outputs.release_time }}
          msvcArch: ${{ matrix.msvc_arch }}
        shell: pwsh
        run: |
          & .github\scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
           $name = ${env:archiveName}
           echo "::set-output name=packageName::$name" 

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@{latest-release}
      - name: uploadRelease
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ matrix.qt_ver }}-${{ env.targetName }}_${{ matrix.os }}_${{steps.vars.outputs.release_date}}.zip
          tag: v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          overwrite: true
          release_name: GoldenDict-ng-v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          prerelease: ${{env.prerelease}}
          body: |
            release on date:      ${{steps.vars.outputs.release_date}} time: ${{steps.vars.outputs.release_time_clock}}  
            branch:               ${{ github.ref_name }}
            commit:               ${{ steps.vars.outputs.sha_short }} 
            Qt version:           Qt5.15.2, Qt6.X  
            Windows built with:   msvc64,  Visual studio 2019
            ## goldendict.exe can not be used alone 
            if you have a previous version. replace this maybe ok. if not ,download the whole bundle.
            AppImage built with:  Ubuntu-20.04 ,latest gcc
            macos built with:     macos-10.15,macos-11.0,clang_64 x86_64
                                  Qt6.X(Universal Build)
                                  Qt5.15.2(Intel Kind)
            auto built by github action. use on your on risk:-)
            **recommend version**:Qt6.X   (with the latest bug fixes and performance enhancements)

            Filename pattern: **[Qt version]-GoldenDict-[OS]-[release-date].[ext]**
            [xapian](https://xapian.org/)  is enabled by default which offers 10X~20X performance 
            ------------------------------
            文件名的模式: **[Qt version]-GoldenDict-[OS]-[release-date].[ext]** 
            [xapian](https://xapian.org/) 用于全文索引的创建，提供更快的全文索引创建、搜索支持
            比如：
            6.4.3-GoldenDict.exe_windows-2022_20230502.zip
            表示基于qt6.4.3，windows-2022,  于20230502日创建的版本。


            CHANGES:
            ${{ steps.changelog.outputs.changelog }}  
            ${{steps.build_changelog.outputs.changelog}}
      - name: upload goldendict.exe only
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release/${{ env.targetName }}
          asset_name: ${{ matrix.qt_ver }}-${{ env.targetName }}
          tag: v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          overwrite: true 
          release_name: GoldenDict-ng-v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          prerelease: ${{env.prerelease}}
            

      - name: copy nsis 
        shell: bash
        run: |
          ls -al
          cp tools/nsis/GoldenDict.nsi ${{ steps.package.outputs.packageName }}/
      - name: Create installer
        uses: joncloud/makensis-action@v3.6
        with:
          arguments: "/V3"
          script-file: ${{ steps.package.outputs.packageName }}/GoldenDict.nsi
      - name: make installer 
        run: |
          ls *.exe
          cd ${{ steps.package.outputs.packageName }} 
          ls *.exe
      - name: upload goldendict installer
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}/GoldenDict-ng-v23-Installer.exe
          asset_name: ${{ matrix.qt_ver }}-GoldenDict-ng-Installer.exe
          tag: v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          overwrite: true 
          release_name: GoldenDict-ng-v${{env.version}}-${{env.version-suffix}}.${{ steps.vars.outputs.release_hm }}.${{ steps.vars.outputs.sha_short }}
          prerelease: ${{env.prerelease}}
          